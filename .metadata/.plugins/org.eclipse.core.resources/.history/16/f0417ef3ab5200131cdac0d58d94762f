package Gui;

import jade.wrapper.StaleProxyException;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;

import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

import Backend.AgentEnvironmentCreator;
import Backend.ChartCreator;
import Backend.ProgramData;

import com.jgoodies.forms.builder.DefaultFormBuilder;


public class MainWindow implements WindowListener{
	
	static ChartPresenter chartpres;
	public JFrame frame;
	private DefaultFormBuilder builder = new ProgramData().getNewBuilder();
	public ScenarioImportExportWindow scenarioImportExportWindow;
	
	public MainWindow() {
		scenarioImportExportWindow = new ScenarioImportExportWindow();
		initialize();
	}

	private void initialize() {
		frame = new JFrame();
		BufferedImage myPicture = ImageIO.read(new File("path-to-file"));
		BufferedImage logoicon16x16 = ImageIO.read(new File("img/MapssIcon16x16.png");
		BufferedImage logoicon32x32 = ImageIO.read(new File("img/MapssIcon32x32.png");
		BufferedImage logoicon64x64 = ImageIO.read(new File("img/MapssIcon64x64.png");
		BufferedImage logoicon128x128 = ImageIO.read(new File("img/MapssIcon128x128.png");
		List<BufferedImage> iconList = new List<BufferedImage>();
		frame.setIconImages(iconList);
		frame.setBounds(100, 100, 1031, 565);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.addWindowListener(this);
		frame.setTitle("MAPSS - Multi Agent Production System Simulator");
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		frame.getContentPane().add(tabbedPane);
        
		CreateGridModule createGridModule = new CreateGridModule();
		//ProductListEditorModule productListEditorModule = new ProductListEditorModule();
		
		builder.append(createGridModule);
		builder.nextLine();
		
		JPanel topologieSetupTab = builder.getPanel();
		builder = new ProgramData().getNewBuilder();
		tabbedPane.addTab("Topologie Setup", null, topologieSetupTab, null);
		
		SimulationModule simulationModule = new SimulationModule();
		builder.append(simulationModule);
		
		JPanel simulationTab = builder.getPanel();
		builder = new ProgramData().getNewBuilder();
		tabbedPane.addTab("Scenario Setup", null, simulationTab, null);
		
		DefaultCategoryDataset data2 = new DefaultCategoryDataset();		
		data2.addValue(9.0, "p1", "Category 1");
		data2.addValue(6.0, "p1", "Category 2");
		data2.addValue(2.0, "p1", "Category 3");
		data2.addValue(9.0, "p2", "Category 1");
		data2.addValue(6.0, "p2", "Category 2");
		data2.addValue(2.0, "p2", "Category 3");
		data2.addValue(9.0, "p3", "Category 1");
		data2.addValue(6.0, "p3", "Category 2");
		data2.addValue(2.0, "p3", "Category 3");
		data2.addValue(9.0, "p4", "Category 1");
		data2.addValue(6.0, "p4", "Category 2");
		data2.addValue(2.0, "p4", "Category 3");
		JFreeChart ch = ChartCreator.drawBarChart("Barchart Test", "x", "y", data2);

		chartpres = new ChartPresenter();
		chartpres.addChart(ch);
		builder.append(chartpres);
		builder.nextLine();
		JPanel lastResultsTab = builder.getPanel();
		builder = new ProgramData().getNewBuilder();
		tabbedPane.addTab("Simulation and Results", null, lastResultsTab, null);
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setSize(100, 15);
		frame.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmNewScenario = new JMenuItem("New Scenario");
		mnFile.add(mntmNewScenario);
		
		JMenuItem mntmImportScenario = new JMenuItem("Import/Export Scenario");
		mnFile.add(mntmImportScenario);
		mntmImportScenario.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				scenarioImportExportWindow.setVisible(true);
			}
		});
		
		JMenu mnEdit = new JMenu("Edit");
		menuBar.add(mnEdit);
		
		JMenuItem mntmAgents = new JMenuItem("Agents");
		mnEdit.add(mntmAgents);
		
		JMenuItem mntmProducts = new JMenuItem("Products");
		mnEdit.add(mntmProducts);
		
		JMenu mnHelp = new JMenu("Help");
		menuBar.add(mnHelp);
		
		JMenuItem mntmJadeGui = new JMenuItem("Jade Monitor");
		mnHelp.add(mntmJadeGui);
		mntmJadeGui.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					AgentEnvironmentCreator.addRemoteMonitoringAgent();
				} catch (StaleProxyException e1) {
					e1.printStackTrace();
				}
//				String[] bootArgs = { 
//						"-gui",
//						String.format("-mtp \"jade.mtp.http.MessageTransportProtocol(http://{0}:{1}/acc)\"", Profile.LOCAL_HOST, Profile.LOCAL_PORT),
//						"agentInstance:jade.core.Agent()"
//				};
//				
//				@SuppressWarnings("unused")
//				Boot boot = new Boot();
//				Boot.main(bootArgs);
//				AgentEnvironmentCreator.getRuntime().startUp(AgentEnvironmentCreator.getProfile());
			}});
		
		JMenuItem mntmAbout = new JMenuItem("About");
		mnHelp.add(mntmAbout);
	}
	
	public static ChartPresenter getChart(){
		return chartpres;
	}
	
	@Override
	public void windowActivated(WindowEvent e) {
	}
	@Override
	public void windowClosed(WindowEvent e) {
		System.out.println("Main Window Closed.");
	}
	@Override
	public void windowClosing(WindowEvent e) {
		System.out.println("Main Window Closing...");
	}
	@Override
	public void windowDeactivated(WindowEvent e) {
	}
	@Override
	public void windowDeiconified(WindowEvent e) {
	}
	@Override
	public void windowIconified(WindowEvent e) {
	}
	@Override
	public void windowOpened(WindowEvent e) {
	}
}
