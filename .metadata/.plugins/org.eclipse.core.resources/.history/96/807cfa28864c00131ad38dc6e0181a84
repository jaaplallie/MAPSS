package GraphicalGridBuilder;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import net.miginfocom.swing.MigLayout;

public class GraphicalGrid extends JFrame{

	GraphicalGridTarget[][] grid;
	
	public GraphicalGrid(int x, int y){
		grid = new GraphicalGridTarget[y][x];
		
		Boolean xEven = true;
		Boolean yEven = true;
		for(int targetY = 0; targetY < (grid.length-1); targetY++){
			for(int targetX = 0; targetX < (grid[targetY].length-1); targetX++){
				if(((targetX+1)%2)==0){
					xEven = false;
				}
				else{
					xEven = true;
				}
				if(((targetY+1)%2)==0){
					yEven = false;
				}
				else{
					yEven = true;
				}
				
				//grid[y][x] = new GraphicalGridTarget(new GraphicalGridObject[]{new GraphicalGridNothingObject()});
				System.out.println(String.format("tY=[%s] tX=[%s] yE=[%s] xE=[%s] gY=[%s] gX=[%s]", targetY+"", targetX+"", yEven+"", xEven+"", grid.length, grid[targetY].length));
				if(xEven){
					if(yEven){
						//xeven = true & yeven = true
						if(
								((targetY == 0) && (targetX == 0)) || 
								((targetY == 0) && (targetX == (grid[targetY].length-1))) || 
								((targetY == (grid.length-1)) && (targetX == 0)) || 
								((targetY == (grid.length-1)) && (targetX == (grid[targetY].length-1))) 
						){
							grid[targetY][targetX] = new GraphicalGridTarget(new GraphicalGridObject[]{new GraphicalGridEquiplet()});
						}
						else if(
								((targetY == 0) && (targetX != 0)) || 
								((targetY != 0) && (targetX == 0)) || 
								((targetY != 0) && (targetX == (grid[targetY].length-1))) || 
								((targetY == (grid.length-1)) && (targetX != 0))
						){
							grid[targetY][targetX] = new GraphicalGridTarget(
								new GraphicalGridObject[]{
									new GraphicalGridNothingObject(),
									new GraphicalGridEquiplet(),
									new GraphicalGridTPathTransport(targetY, targetX, grid.length)
								}
							);
						}
						else{
							grid[targetY][targetX] = new GraphicalGridTarget(
								new GraphicalGridObject[]{
									new GraphicalGridNothingObject(),
									new GraphicalGridEquiplet(),
									new GraphicalGridCrossedTransport(),
									new GraphicalGridHorizontalTransport(),
									new GraphicalGridVerticalTransport()			
								}
							);
						}
					}
					else{
						//xeven = true & yeven = false
						if((targetX == 0) || (targetX == (grid[targetY].length-1))){
							grid[targetY][targetX] = new GraphicalGridTarget(
								new GraphicalGridObject[]{
									new GraphicalGridNothingObject(),
									new GraphicalGridVerticalTransport(),
									new GraphicalGridTPathTransport(targetY, targetX, grid.length)			
								}
							);
						}
						else{
							grid[targetY][targetX] = new GraphicalGridTarget(
								new GraphicalGridObject[]{
									new GraphicalGridNothingObject(),
									new GraphicalGridVerticalTransport()		
								}
							);
						}
					}
				}
				else{
					if(yEven){
						//xeven = false & yeven = true
						if((targetY == 0) || (targetY == (grid.length-1))){
							grid[targetY][targetX] = new GraphicalGridTarget(
								new GraphicalGridObject[]{
									new GraphicalGridNothingObject(),
									new GraphicalGridHorizontalTransport(),
									new GraphicalGridTPathTransport(targetY, targetX, grid.length)			
								}
							);
						}
						else{
							grid[targetY][targetX] = new GraphicalGridTarget(
								new GraphicalGridObject[]{
									new GraphicalGridNothingObject(),
									new GraphicalGridHorizontalTransport(),
									new GraphicalGridVerticalTransport(),
									new GraphicalGridCrossedTransport()			
								}
							);
							
						}
					}
					else{
						//xeven = false & yeven = false
						grid[targetY][targetX] = new GraphicalGridTarget(
							new GraphicalGridObject[]{
								new GraphicalGridNothingObject(),
								new GraphicalGridCrossedTransport(),
								new GraphicalGridForwardSlashTransport(),
								new GraphicalGridBackSlashTransport()
							}
						);
					}
				}
			}
		}
	}
	
	public boolean insert(GraphicalGridTarget ggt, int x, int y){
		Boolean returnVal = true;
		
		if(x < 0 || y < 0){
			System.out.println("Something went wrong while inserting...");
			
			if(x < 0){
				System.out.println("x value is less than zero.");
				returnVal = false;
			}
			if(y < 0){
				System.out.println("y value is less than zero.");
				returnVal = false;
			}
		}
		else{
			grid[y][x] = ggt;
		}
		
		return returnVal;
	}
	
	public boolean remove(int x, int y){
		Boolean returnVal = true;
		
		if(x < 0 || y < 0){
			System.out.println("Something went wrong while removing...");
			
			if(x < 0){
				System.out.println("x value is less than zero.");
				returnVal = false;
			}
			if(y < 0){
				System.out.println("y value is less than zero.");
				returnVal = false;
			}	
		}
		else{
			if(grid[y][x].getClass().equals(new GraphicalGridNothingObject().getClass())){
				System.out.println("Grid place was already a nothing Object.\n" +
						"No changes were made to the grid"
				);
			}
			else{
				grid[y][x] = new GraphicalGridTarget(new GraphicalGridObject[]{new GraphicalGridNothingObject()});
			}
		}
		
		return returnVal;
	}
	
	public JPanel draw(){
		JPanel returnPanel = new JPanel();
		//returnPanel.setLayout(new MigLayout("", "[grow]", "[grow][grow][]"));
		returnPanel.setLayout(new MigLayout("", "[grow, fill][grow, fill]", "[]"));

		for(int targetY = 0; targetY < (grid.length-1); targetY++){
			for(int targetX = 0; targetX < (grid[targetY].length-1); targetX++){
				System.out.println(grid[targetY][targetX].getButton().toString());
				System.out.println(grid[targetY][targetX].getPossibilitiesString());
				System.out.println("x: " + targetX);
				System.out.println("y: " + targetY);
				
				//returnPanel.add(grid[targetY][targetX].getButton(), "cell " + targetX + " " + targetY + ",alignx center,growy");
				returnPanel.add(grid[targetY][targetX].getButton(), "cell " + targetX + " " + targetY + ",growx");
			}
			
		}
		return returnPanel;
	}
}
