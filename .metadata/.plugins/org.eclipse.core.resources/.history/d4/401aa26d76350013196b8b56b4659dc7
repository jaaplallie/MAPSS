package Gui;

import java.awt.Component;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;

import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

import Backend.ChartCreator;

import com.jgoodies.forms.builder.DefaultFormBuilder;
import com.jgoodies.forms.factories.FormFactory;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.RowSpec;

public class MainWindow implements WindowListener, WindowFocusListener, WindowStateListener {

	public JFrame frame;
	private DefaultFormBuilder builder = new DefaultFormBuilder(new FormLayout(""));
	
	public MainWindow() {
		initialize();
	}

	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1031, 565);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.addWindowListener(this);
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		frame.getContentPane().add(tabbedPane);
		
		builder.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        builder.appendColumn("right:pref");
        builder.appendColumn("3dlu");
        builder.appendColumn("fill:max(pref; 100px)");
        builder.appendColumn("5dlu");
        builder.appendColumn("right:pref");
        builder.appendColumn("3dlu");
        builder.appendColumn("fill:max(pref; 100px)");
        
		AgentListEditorModule agentListEditorModule = new AgentListEditorModule();
		ProductListEditorModule productListEditorModule = new ProductListEditorModule();
		
		builder.append(agentListEditorModule, productListEditorModule);
		builder.nextLine();
		builder.append(new JSeparator());
		builder.nextLine();
		
		tabbedPane.addTab("Setup", null, builder.getPanel(), null);
		
		builder.append(new JLabel("Simulation Pane"));
		builder.nextLine();
		tabbedPane.addTab("Simulation", null, builder.getPanel(), null);
		
		ChartCreator chartcreator = new ChartCreator();
		DefaultCategoryDataset data2 = new DefaultCategoryDataset();		
		data2.addValue(9.0, "p1", "Category 1");
		data2.addValue(6.0, "p1", "Category 2");
		data2.addValue(2.0, "p1", "Category 3");
		data2.addValue(9.0, "p2", "Category 1");
		data2.addValue(6.0, "p2", "Category 2");
		data2.addValue(2.0, "p2", "Category 3");
		data2.addValue(9.0, "p3", "Category 1");
		data2.addValue(6.0, "p3", "Category 2");
		data2.addValue(2.0, "p3", "Category 3");
		data2.addValue(9.0, "p4", "Category 1");
		data2.addValue(6.0, "p4", "Category 2");
		data2.addValue(2.0, "p4", "Category 3");
		JFreeChart ch = chartcreator.drawBarChart("Barchart Test", "x", "y", data2);
		ChartPresenter chartpres = new ChartPresenter();
		chartpres.addChart(ch);
		builder.append(chartpres);
		builder.nextLine();
		tabbedPane.addTab("Last Results", null, builder.getPanel(), null);
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setSize(100, 15);
		frame.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmNewScenario = new JMenuItem("New Scenario");
		mnFile.add(mntmNewScenario);
		
		JMenuItem mntmImportScenario = new JMenuItem("Import Scenario");
		mnFile.add(mntmImportScenario);
		
		JMenuItem mntmExportScenario = new JMenuItem("Export Scenario");
		mnFile.add(mntmExportScenario);
		
		JMenu mnEdit = new JMenu("Edit");
		menuBar.add(mnEdit);
		
		JMenuItem mntmAgents = new JMenuItem("Agents");
		mnEdit.add(mntmAgents);
		
		JMenuItem mntmProducts = new JMenuItem("Products");
		mnEdit.add(mntmProducts);
		
		JMenu mnHelp = new JMenu("Help");
		menuBar.add(mnHelp);
		
		JMenuItem mntmAbout = new JMenuItem("About");
		mnHelp.add(mntmAbout);
	}


	@Override
	public void windowStateChanged(WindowEvent arg0) {	
	}
	@Override
	public void windowGainedFocus(WindowEvent arg0) {
	}
	@Override
	public void windowLostFocus(WindowEvent arg0) {
	}
	@Override
	public void windowActivated(WindowEvent e) {
	}
	@Override
	public void windowClosed(WindowEvent e) {
		System.out.println("Main Window Closed.");
	}
	@Override
	public void windowClosing(WindowEvent e) {
		System.out.println("Main Window Closing...");
	}
	@Override
	public void windowDeactivated(WindowEvent e) {
	}
	@Override
	public void windowDeiconified(WindowEvent e) {
	}
	@Override
	public void windowIconified(WindowEvent e) {
	}
	@Override
	public void windowOpened(WindowEvent e) {
	}

}
