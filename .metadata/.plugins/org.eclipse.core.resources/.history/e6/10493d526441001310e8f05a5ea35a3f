package Backend;

import java.util.ArrayList;
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class XmlWriter {
	StringBuilder writer;
	
	public XmlWriter(){
		writer = new StringBuilder();
	}
	
	@SuppressWarnings("static-access")
	public void Write(Scenario scenario, String fileLocation){
		String scenarioName = "";
		
		  try {
			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
	 
			// root elements
			Document doc = docBuilder.newDocument();
			Element rootElement = doc.createElement("src");
			doc.appendChild(rootElement);
				Element rootname = doc.createElement("name");
				rootElement.appendChild(rootname);
				rootname.appendChild(doc.createTextNode(scenarioName));
				Element grd = doc.createElement("grd");
				rootElement.appendChild(grd);
					Element xsize = doc.createElement("xsize");
					xsize.appendChild(doc.createTextNode(scenario.scenario_Grid.getX()+""));
					grd.appendChild(xsize);
					Element ysize = doc.createElement("ysize");
					xsize.appendChild(doc.createTextNode(doc.createTextNode(scenario.scenario_Grid.getY()+""));
					grd.appendChild(ysize);
					Element eqs = doc.createElement("eqs");
					grd.appendChild(eqs);
				Element prod = doc.createElement("prod");
				rootElement.appendChild(prod);
	 
			for(int y = 0; y < scenario.scenario_Grid.getGrid().length; y++){
				for(int x = 0; x < scenario.scenario_Grid.getGrid()[y].length; x++){
					//<EQ><NAME></NAME><XPOS></XPOS><YPOS></YPOS><ARGS></ARGS></EQ>
					Element new_eq = doc.createElement("eq");
						Element new_eq_name = doc.createElement("name");
						new_eq_name.appendChild(doc.createTextNode(scenario.scenario_Grid.getGrid()[y][x].getName()));
						new_eq.appendChild(new_eq_name);
						Element new_eq_xpos = doc.createElement("xpos");
						new_eq_xpos.appendChild(doc.createTextNode(scenario.scenario_Grid.getGrid()[y][x].getPosition()[0]+""));
						new_eq.appendChild(new_eq_xpos);
						Element new_eq_ypos = doc.createElement("ypos");
						new_eq_ypos.appendChild(doc.createTextNode(scenario.scenario_Grid.getGrid()[y][x].getPosition()[1]+""));
						new_eq.appendChild(new_eq_ypos);
						Element new_eq_args = doc.createElement("args");
						new_eq_args.appendChild(doc.createTextNode(scenario.scenario_Grid.getGrid()[y][x].getArgsString()));
						new_eq.appendChild(new_eq_args);
					eqs.appendChild(new_eq);
//					scenario.scenario_Grid.getGrid()[y][x].getName();
//					scenario.scenario_Grid.getGrid()[y][x].getPosition();
//					scenario.scenario_Grid.getGrid()[y][x].getArgs();
				}
			}
			// set attribute to staff element
			Attr attr = doc.createAttribute("id");
			attr.setValue("1");
			staff.setAttributeNode(attr);
	 
			// shorten way
			// staff.setAttribute("id", "1");
	 
			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File(fileLocation));
	 
			// Output to console for testing
			// StreamResult result = new StreamResult(System.out);
	 
			transformer.transform(source, result);
	 
			System.out.println("Scenario File saved!");
	 
		  } 
		  catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		  } 
		  catch (TransformerException tfe) {
			tfe.printStackTrace();
		  }
	}
}
